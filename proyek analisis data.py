# -*- coding: utf-8 -*-
"""Proyek_Analisis_Data_E_Commerce_Dicoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pbzPLEuLkSNiJNQTB_YpKzwnmNRLqNEt

# **Proyek Analisis Data: E-Commerce Public Dataset**

*   Nama : Muhammad Zaidan Albert
*   Email : zaidanalbert5@gmail.com
*   Id Dicoding: vierrde

## **Menetukan Pertanyaan**

*   Apa saja Produk yang menjadi terlaris dan tidak?
*   Di daerah manakah yang memiliki customer terbanyak?
*   Bagaimana tingkat kepuasan customer terhadapÂ pelayanan?

## **Menyiapkan Library yang dibutuhkan**
"""

import numpy as np
import pandas as pd
import scipy
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

"""## **Data Wrangling**

**Data Gathering**
"""

customers_df = pd.read_csv("customers_dataset.csv", delimiter=",")
customers_df.head()

geo_df = pd.read_csv("geolocation_dataset.csv", delimiter=",")
geo_df.head()

orderitems_df = pd.read_csv("order_items_dataset.csv", delimiter=",")
orderitems_df.head()

orderpayments_df = pd.read_csv("order_payments_dataset.csv", delimiter=",")
orderpayments_df.head()

orderreviews_df = pd.read_csv("order_reviews_dataset.csv", delimiter=",")
orderreviews_df.head()

orderdataset_df = pd.read_csv("orders_dataset.csv", delimiter=",")
orderdataset_df.head()

product_category_df = pd.read_csv("product_category_name_translation.csv", delimiter=",")
product_category_df.head()

product_dataset_df = pd.read_csv("products_dataset.csv", delimiter=",")
product_dataset_df.head()

sellers_df = pd.read_csv("sellers_dataset.csv", delimiter=",")
sellers_df.head()

"""**Data Assesing**"""

print("\n", customers_df.info())
print("\n", geo_df.info())
print("\n", orderitems_df.info())
print("\n", orderpayments_df.info())
print("\n", orderreviews_df.info())
print("\n", orderdataset_df.info())
print("\n", product_category_df.info())
print("\n", product_dataset_df.info())
print("\n", sellers_df.info())

print("\nInformasi data null customers:\n", customers_df.isnull().sum())
print("\nInformasi data null geolocation:\n", geo_df.isnull().sum())
print("\nInformasi data null order items:\n", orderitems_df.isnull().sum())
print("\nInformasi data null order payments:\n", orderpayments_df.isnull().sum())
print("\nInformasi data null order reviews:\n", orderreviews_df.isnull().sum())
print("\nInformasi data null order dataset:\n", orderdataset_df.isnull().sum())
print("\nInformasi data null product category:\n", product_category_df.isnull().sum())
print("\nInformasi data null product dataset:\n", product_dataset_df.isnull().sum())
print("\nInformasi data null sellers:\n", sellers_df.isnull().sum())

print("\nDescribe data customers:\n", customers_df.describe(include='all'))
print("\nDescribe data geolocation:\n", geo_df.describe(include='all'))
print("\nDescribe data order items:\n", orderitems_df.describe(include='all'))
print("\nDescribe data order payments:\n", orderpayments_df.describe(include='all'))
print("\nDescribe data order reviews:\n", orderreviews_df.describe(include='all'))
print("\nDescribe data order dataset:\n", orderdataset_df.describe(include='all'))
print("\nDescribe data product category:\n", product_category_df.describe(include='all'))
print("\nDescribe data sellers:\n", sellers_df.describe(include='all'))

"""**Data Cleaning**"""

orderreviews_df.info()

orderreviews_df[orderreviews_df.review_comment_title.isna()]

orderreviews_df.review_comment_title.value_counts()

orderreviews_df[orderreviews_df.review_comment_message.isna()]

orderreviews_df.review_comment_message.value_counts()

orderreviews_df.fillna(value="no comment", inplace=True)

orderdataset_df.info()

orderdataset_df[orderdataset_df.order_approved_at.isna()]

datetime_columns = ["shipping_limit_date"]

for column in datetime_columns:
  orderitems_df[column] = pd.to_datetime(orderitems_df[column])

datetime_columns2 = ["review_creation_date","review_answer_timestamp"]

for column in datetime_columns2:
  orderreviews_df[column] = pd.to_datetime(orderreviews_df[column])

datetime_columns3 = ["order_purchase_timestamp","order_approved_at","order_delivered_carrier_date","order_delivered_customer_date","order_estimated_delivery_date"]

for column in datetime_columns3:
  orderdataset_df[column] = pd.to_datetime(orderdataset_df[column])

print("\n", orderitems_df.info())
print("\n", orderreviews_df.info())
print("\n", orderdataset_df.info())

"""# **Exploratory Data Analysis (EDA)**

**Explore customers_df**
"""

customers_df.sample(6)

customers_df.describe(include='all')

customers_df.customer_id.is_unique

customers_df.customer_id.duplicated

customers_df.groupby(by="customer_city").customer_id.nunique().sort_values(ascending=False)

customers_df.groupby(by="customer_state").customer_id.nunique().sort_values(ascending=False)

orderpayments_df.sample(6)

orderpayments_df.describe(include='all')

orderpayments_df.groupby(by="payment_type").order_id.nunique().sort_values(ascending=False)

orderdataset_df.sample(6)

delivery_time = orderdataset_df["order_delivered_customer_date"] - orderdataset_df["order_delivered_carrier_date"]
delivery_time = delivery_time.apply(lambda x: x.total_seconds())
orderdataset_df["delivery_time"] = round(delivery_time/86400)

orderdataset_df.sample(6)

customer_id_in_orderdataset_df = orderdataset_df.customer_id.tolist()
customers_df["status"] = customers_df["customer_id"].apply(lambda x: "Active" if x in customer_id_in_orderdataset_df else "Non Active")
customers_df.sample(6)

customers_df.groupby(by="status").customer_id.count()

orders_customers_df = pd.merge(
    left=customers_df,
    right=orderdataset_df,
    how="left",
    left_on="customer_id",
    right_on="customer_id"
)
orders_customers_df.head()

orders_customers_df.groupby(by="customer_city").order_id.nunique().sort_values(ascending=False).head(10)

orders_customers_df.groupby(by="customer_state").order_id.nunique().sort_values(ascending=False).head(10)

orders_customers_df.groupby(by="customer_zip_code_prefix").order_id.nunique().sort_values(ascending=False).head(10)

orders_customers_df.groupby(by="order_status").order_id.nunique().sort_values(ascending=False).head(10)

order_paymentrev_df = pd.merge(
    left=orderpayments_df,
    right=orderreviews_df,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
order_paymentrev_df.head()

order_paymentrev_df.groupby(by="payment_type").order_id.nunique().sort_values(ascending=False).head(10)

order_paymentrev_df.sort_values(by="payment_value", ascending=False)

order_paymentrev_df.groupby(by="payment_type").agg({
    "order_id": "nunique",
    "payment_value":  ["min", "max"]
})

"""**Merge cust_orders_df & order_payrev**"""

customer_df = pd.merge(
    left=orders_customers_df,
    right=order_paymentrev_df,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
customer_df.head()

"""## **Explore orderitems_df & sellers_df**

**Merge orderitems_df & sellers_df**
"""

item_seller_df = pd.merge(
    left=orderitems_df,
    right=sellers_df,
    how="left",
    left_on="seller_id",
    right_on="seller_id"
)
item_seller_df.head()

item_seller_df.groupby(by="seller_city").seller_id.nunique().sort_values(ascending=False).head(10)

"""## Explore productdataset_df & product_category_df

Merge productdataset_df & product_category_df

"""

products_df = pd.merge(
    left=product_dataset_df,
    right=product_category_df,
    how="left",
    left_on="product_category_name",
    right_on="product_category_name"
)
products_df.head()

products_df.groupby(by="product_category_name").product_id.nunique().sort_values(ascending=False).head(10)

products_df.groupby(by="product_category_name_english").product_id.nunique().sort_values(ascending=False).head(10)

"""**Merge item_seller_df & products_df**"""

seller_df = pd.merge(
    left=products_df,
    right=item_seller_df,
    how="left",
    left_on="product_id",
    right_on="product_id"
)
seller_df.head()

seller_df.sort_values(by="price", ascending=False)

seller_df.groupby(by="product_category_name").agg({
    "order_id": "nunique",
    "price":  ["min", "max"]
})

seller_df.groupby(by="product_category_name_english").agg({
    "order_id": "nunique",
    "price":  ["min", "max"]
})

"""**Explore geo_df**"""

geo_df.sample(6)

geo_df.groupby('geolocation_zip_code_prefix').size().sort_values(ascending=False)

geo_df[geo_df['geolocation_zip_code_prefix'] == 24220].head()

"""## **Explore All Data**

**Merge all Data**
Untuk dataset geolocation tidak digabungkan karena tidak diperlukannya data untuk penggabungan data yang saya lakukan

"""

all_data = pd.merge(
    left=customer_df,
    right=seller_df,
    how="left",
    left_on="order_id",
    right_on="order_id"
)
all_data.head()

all_data.info()

all_data.groupby(by=["customer_city", "product_category_name_english"]).agg({
    "price": "sum",
    "freight_value": "sum"
})

all_data.groupby(by=["customer_state", "product_category_name_english"]).agg({
    "price": "sum",
    "freight_value": "sum"
})

all_data.groupby(by="customer_state").agg({
    "order_id": "nunique",
    "payment_value": "sum"
}).sort_values(by="payment_value", ascending=False)

all_data.groupby(by="product_category_name_english").agg({
    "order_id": "nunique",
    "review_score":  ["min", "max"]
})

all_data.to_csv('all_data.csv', index=False)

"""# **Visualization & Explanatory Analysis**

**Pertanyaan 1 : Apa saja Produk yang menjadi terlaris dan tidak?**
"""

sum_order_items_df = all_data.groupby("product_category_name")["product_id"].count().reset_index()
sum_order_items_df = sum_order_items_df.rename(columns={"product_id": "products"})
sum_order_items_df = sum_order_items_df.sort_values(by="products", ascending=False)
sum_order_items_df = sum_order_items_df.head(10)

sum_order_items_df.head()

sum_order_items_df = all_data.groupby("product_category_name_english")["product_id"].count().reset_index()
sum_order_items_df = sum_order_items_df.rename(columns={"product_id": "products"})
sum_order_items_df = sum_order_items_df.sort_values(by="products", ascending=False)
sum_order_items_df = sum_order_items_df.head(10)

sum_order_items_df.head()

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="products", y="product_category_name_english", data=sum_order_items_df.head(6), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Produk yang terlaris", loc="center", fontsize=15)
ax[0].tick_params(axis ='y', labelsize=12)

sns.barplot(x="products", y="product_category_name_english", data=sum_order_items_df.sort_values(by="products", ascending=True).head(6), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Produk yang tidak laris", loc="center", fontsize=15)
ax[1].tick_params(axis='y', labelsize=12)

plt.suptitle("Produk yang menjadi terlaris dan tidak", fontsize=20)
plt.show()

"""**Pertanyaan 2 : Di daerah manakah yang memiliki customer terbanyak?**"""

bystate_df = all_data.groupby(by="customer_state").customer_id.nunique().reset_index()
bystate_df.rename(columns={
    "customer_id": "customer_count"
    }, inplace=True)
bystate_df = bystate_df.sort_values(by="customer_count", ascending=False)
print(bystate_df.head())

plt.figure(figsize=(10, 5))

most_common_state = bystate_df.loc[bystate_df['customer_count'].idxmax(), 'customer_state']

colors_ = []
for index, state in enumerate(bystate_df['customer_state']):
    if index == 0:
        colors_.append("#72BCD4")  # Color the first bar as "#72BCD4"
    else:
        colors_.append("#D3D3D3")  # Color the rest as "#D3D3D3"

sns.barplot(
    x="customer_state",
    y="customer_count",
    data=bystate_df.sort_values(by="customer_count", ascending=False),
    palette=colors_
)

plt.title("Number of Customer by States", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='y', labelsize=12)
plt.show()

"""**Pertanyaan 3 : Bagaimana tingkat kepuasan customer terhadapÂ pelayanan?**"""

import seaborn as sns
import matplotlib.pyplot as plt

review_scores = all_data['review_score'].value_counts().sort_values(ascending=False)
most_common_score = review_scores.idxmax()

colors_ = ["#72BCD4"] + ["#D3D3D3"] * (len(review_scores) - 1)  # Set first bar color to #72BCD4 and rest to #D3D3D3

plt.figure(figsize=(10, 5))
sns.barplot(y=review_scores.index,
            x=review_scores.values,
            order=review_scores.index,
            palette=colors_,
            orient='h'
            )

plt.title("Rating by customers for service", fontsize=15)
plt.ylabel("Rating")
plt.xlabel("Count")
plt.yticks(fontsize=12)
plt.show()

"""# Kesimpulan


*   Apa saja Produk yang menjadi terlaris dan tidak?
> Grafik dengan jelas menunjukkan bahwa produk yang paling diminati dalam penjualan adalah "bed_bath_table", sementara "auto" memiliki penjualan terendah. Perbedaan signifikan antara kedua kategori produk tersebut menggambarkan preferensi pelanggan yang kuat terhadap kategori "bed_bath_table" dalam pembelian mereka.

*   Di daerah manakah yang memiliki customer terbanyak?
> Berdasarkan grafik, jumlah pelanggan terbanyak berasal dari negara bagian SÃ£o Paulo (SP). Dari sana, lebih dari separuh total pelanggan berpartisipasi dalam layanan yang diberikan.

*   Bagaimana tingkat kepuasan customer terhadapÂ pelayanan?
> Grafik menunjukkan bahwa rating tertinggi untuk layanan adalah 5.0, dengan jumlah lebih dari 60.000.

"""
